open Prelude importing (Maybe)
open Financial importing (CreditCard)

% domain: Customer
% service: DefaultCustomer
% version: 0.1


# Person

This document will show the way we're going to work with
People in the application. People have an Address where
they live. CHanged


These are the fields which are important for Person:

 * Person
 * Address


alias Id = String
    | min 2
    | max 2
    | pattern /[A-Z]{2}/


choice Gender =
    | "Male"
    | "Female"
    | "Other"


@ The address of a person. This is the functional 
@ location of where a person lives. This type is 
@ of course designed for the Dutch address system.
type Address =
    Street: String
    PostalCode: String
    @ Yes, a real number
    @ type: Number
    @ note: This is a simple note on a field
    HouseNumber: Number
    HouseNumberExtension: String
    City: String
    @ The country code is a two letter code
    @ all in capital letters.
    CountryCode: String
        | length 2
        | pattern /[A-Z]{2}/
    Country: Maybe String
    Foo: String

type Person extends Customer =
    FirstName: Maybe String
    LastName: String
    Address: Address
    Gender: Gender

type PaymentMethod =
    Customer: Customer
    CreditCard: CreditCard

## Customer Models

type Company extends Customer  =
    OrganisationName: String

@ Someone or some company who buys things
type Customer =
    CustomerId: Id
    VATNumber: String

[Customer](http://pas-wordpress-media.s3.amazonaws.com/content/uploads/2015/09/Customer-service-woman-on-headset-gives-OK-1024x770.jpg)

view {
    % title: Customer 

    Person
    Company
    Customer
}

view {
    Company
}


## Customer Aggregate

This is the customer aggregate. 

@ Please do not use Aggregates yet!!
aggregate Customer {
    % title: Customer Aggregate

    Person
    Company
}

## Service Calls

This next flow diagram shows how we can get a customer from
our CRM backend system.

flow {

    % title: Get Customer

    @ from: API
    @ to: API
    validateAPICall :: Either Ok Error

    @ from: API
    @ to: Service Layer
    getCustomer :: CustomerId -> JWT -> Maybe Customer

    @ Get a Customer from CRM by passing in the CustomerId.
    @ from: Service Layer
    @ to: CRM
    getCustomer :: CustomerId -> AccountId -> Maybe Customer

    @ Validate if the AccountId is actually the Id of the person
    @ for whom the details are fetched.
    @ from: CRM
    @ to: CRM
    validateCustomer :: CustomerId -> AccountId -> Maybe Customer


}

## And a simple mind map

map {
    Lead -> Prospect -> Customer

    "Temperature of the Lead" -> "Make Lead an Offer" -> Prospect

    Lead -> Offer -> Prospect
}


